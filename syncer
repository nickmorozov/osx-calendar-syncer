#!/usr/bin/env node

const { exec } = require('child_process')
const osascript = require('osascript')
const fs = require('fs')
const sqlite3 = require('sqlite3').verbose()

console.log('Connecting to SQLite DB')
const db = new sqlite3.Database('./db/syncer.db', sqlite3.OPEN_READWRITE, (err) => {
  if (err) {
    return console.error(err.message)
  }
  console.log('Connected to the in-memory SQlite database.')
})

// Run shortcut to retrieve all events
exec('echo "" | shortcuts run Syncer', (error, stdout, stderr) => {
  console.log(`\n>>>>> ${new Date().toLocaleString()}\n`)

  if (error) {
    console.log(`error: ${error.message}`)
    return
  }

  if (stderr) {
    console.log(`stderr: ${stderr}`)
    return
  }

  const data = JSON.parse(stdout)

  // Run config
  const syncMarker = data.marker
  const startDate = data.start
  const endDate = data.end
  const prefixesByCalendars = data.prefixesByCalendars
  const listsByTarget = data.listsByTarget
  const personalSources = data.personalSources
  const familySources = data.familySources
  const workSources = data.workSources
  const targetKeysBySources = data.targetKeysBySources

  // Data
  const events = data.events
  const reminders = data.reminders

  // Go over each event, insert into db as not synced if not present
  events.forEach((event) => {
    db.get(`SELECT rowid
            FROM events
            WHERE calendar = ?
              AND title = ?
              AND created = ?`,
      [event.calendar, event.title, event.created],
      (err, row) => {
        if (err) {
          return console.error(err.message)
        }
        return row
          ? () => {
            console.log(`Found event with id ${row.id}`)
            // todo: check for changes and update db, set some "synced" flag to false
            //   then we  would check junctions and based on that - decide insert row and create event or update both 
            return row.rowid
          }
          : () => {
            console.log(`No event found for ${event.title}, creating new entry`)
            db.run(`INSERT INTO events(calendar, title, start, end, location, notes, allday, canceled, status, created,
                                       synced, source, target)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
              [event.calendar,
                event.title, event.start, event.end, event.location, event.notes, event.allday, event.canceled, event.status, event.created, false, true, false],
              function(err) {
                if (err) {
                  return console.log(err.message)
                }
                console.log(`A row has been inserted with rowid ${this.lastID}`)
                return this.lastID
              })
          }
      })
  })

  // Query not synced events and create them
  db.all(`SELECT *
          FROM events
          WHERE synced = ?`, [false], (err, rows) => {
    if (err) {
      throw err
    }
    rows.forEach((row) => {
      console.log(row)

      let key = targetKeysBySources[row.calendar]
      data[key].forEach((targetCalendar) => {
        osascript(`tell application "Calendar"
      tell calendar "${targetCalendar}"
        make new event with properties {
          summary: ${row.title},
          start date: ${row.start},
          end date: ${row.end},
          notes: ${row.notes} ${marker},
          is all day: ${row.allday},
          canceled: ${row.canceled}
        }
        return result
      end tell
    end tell`,
          function(err, data) {
            console.log(err, data)
            if (data) {
              db.run(`UPDATE events
                      SET synced = ?
                      WHERE rowid = ${row.rowid}`, [true], (err) => {
                if (err) {
                  return console.error(err.message)
                }
                console.log(`Row(s) updated: ${this.changes}`)

                db.run(
                  `INSERT INTO events(calendar, title, start, end, location, notes, allday, canceled, status, created,
                                      synced, source, target)
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                  [
                    targetCalendar, // todo: insert first, create, then setr synced=true
                    row.title,
                    row.start,
                    row.end,
                    row.location,
                    row.notes + ' ' + marker,
                    row.allday,
                    row.canceled, row.status, row.created, true, false, true],
                  function(err) {
                    if (err) {
                      return console.log(err.message)
                    }
                    console.log(`A row has been inserted with rowid ${this.lastID}`)
                    return this.lastID
                  })
              })
            }
          })
      })

    })
  })

  // Finally, close the connection
  db.close((err) => {
    if (err) {
      return console.error(err.message)
    }
    console.log('Close the database connection.')
  })
})
